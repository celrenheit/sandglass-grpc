syntax = "proto3";
option go_package = "sgproto";
package sandglass;

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

message Message {
    string topic = 1;
    string partition = 2;

    bytes index = 10 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];
    bytes offset = 11 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];

    bytes key = 20;
    bytes clusteringKey = 21;

    bytes value = 30;
}

message DUIDReply {
    bytes id = 1 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];
}

enum TopicKind {
    TimerKind = 0;
    KVKind = 1;
}

enum StorageDriver {
    RocksDB = 0;
    Badger = 1;
}

enum ConsistencyLevel {
    ONE = 0;
    QUORUM = 10;
    ALL = 20;
}

message CreateTopicParams {
    string name = 1;    
    TopicKind kind = 2;  
    int32 replicationFactor = 3;
    int32 numPartitions = 4;  
    StorageDriver storageDriver = 5;
}


message GetTopicParams {
    string name = 1;
}

message GetTopicReply {
    string name = 1;
    repeated string partitions = 2;
}

message TopicReply {
    bool success = 1;
}


message StoreLocallyReply {
    bool success = 1;
}

message FetchFromRequest {
    string topic = 1;
    string partition = 2;
    bytes from = 3 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];
}

message FetchRangeRequest {
    string topic = 1;
    string partition = 2;
    bytes from = 3 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];
    bytes to = 4 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];
}

message GetRequest {
    string topic = 1;
    string partition = 2;
    bytes key = 3;
    bytes clusteringKey = 4;
}

message ConsumeFromGroupRequest {
    string topic = 1;
    string partition = 2;
    string consumerGroupName = 3;
    string consumerName = 4;
}

message OffsetChangeRequest {
    string topic = 1;
    string partition = 2;
    string consumerGroup = 3;
    string consumerName = 4;
    bytes offset = 5 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];
}

message MultiOffsetChangeRequest {
    string topic = 1;
    string partition = 2;
    string consumerGroup = 3;
    string consumerName = 4;
    repeated bytes offsets = 5 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];
}

message OffsetChangeReply {
    bool success = 1;
}

message LastOffsetReply {
    bytes offset = 1 [(gogoproto.customtype) = "github.com/celrenheit/sandflake.ID", (gogoproto.nullable) = false];
}

enum MarkKind {
    Unknown = 0;
    Consumed = 10;
    NotAcknowledged = 20;
    Acknowledged = 30;
    Commited = 40;
}

message LastOffsetRequest {
    string topic = 1;
    string partition = 2;
    string consumerGroup = 3;
    string consumerName = 4;
    

    MarkKind kind = 5;
}

message FetchFromSyncRequest {
    string topic = 1;
    string partition = 2;
    bytes from = 3;
}

message HasResponse {
    bool exists = 1;
}

message MarkState {
    MarkKind kind = 1;
    int32 deliveryCount = 2;
}

service BrokerService {
  rpc CreateTopic (CreateTopicParams) returns (TopicReply) {
     option (google.api.http) = { 
         post: "/topics" 
         body: "*"
     };
  }

  rpc PublishMessagesStream (stream Message) returns (StoreLocallyReply) {}

  rpc GetTopic (GetTopicParams) returns (GetTopicReply) {
    option (google.api.http) = { 
        get: "/topics/{name}"
    };
 }
  
  rpc Publish (Message) returns (DUIDReply) {
     option (google.api.http) = { 
         post: "/topics/{topic}" 
         additional_bindings {
            post: "/topics/{topic}/{partition}"
        }
         body: "*"
     };
  }


  rpc FetchFrom (FetchFromRequest) returns (stream Message) {}

  rpc FetchRange (FetchRangeRequest) returns (stream Message) {}

  rpc StoreMessagesStream (stream Message) returns (StoreLocallyReply) {}

  rpc ConsumeFromGroup (ConsumeFromGroupRequest) returns (stream Message) {
       option (google.api.http) = { 
            get: "/topics/{topic}/{partition}" 
            additional_bindings {
                get: "/topics/{topic}/{partition}/{consumerGroupName}/{consumerName}"
            }
        };
  }


  rpc Acknowledge (OffsetChangeRequest) returns (OffsetChangeReply) {
        option (google.api.http) = { 
            post: "/topics/ack/{topic}/{partition}" 
            additional_bindings {
                post: "/topics/ack/{topic}/{partition}/{consumerGroup}/{consumerName}"
            }
            body: "*"
        };
  }
  

  rpc AcknowledgeMessages (MultiOffsetChangeRequest) returns (OffsetChangeReply) {}

  rpc Commit (OffsetChangeRequest) returns (OffsetChangeReply) {
      option (google.api.http) = { 
            post: "/topics/commit/{topic}/{partition}" 
            additional_bindings {
                post: "/topics/commit/{topic}/{partition}/{consumerGroup}/{consumerName}"
            }
            body: "*"
        };
  }
}


service InternalService {
    rpc StoreMessageLocally (Message) returns (StoreLocallyReply) {
        option (google.api.http) = { 
        //  post: "/topics/{topic}/{offset}" 
            body: "*"
        };
    }

    rpc GetByKey (GetRequest) returns (Message) {}

    rpc HasKey (GetRequest) returns (HasResponse) {}
 
    rpc FetchFromSync (FetchFromSyncRequest) returns (stream Message) {}

    rpc LastOffset (LastOffsetRequest) returns (LastOffsetReply) {}

    rpc MarkConsumed (OffsetChangeRequest) returns (OffsetChangeReply) {
    }

    rpc GetMarkStateMessage (OffsetChangeRequest) returns (Message) {}
}

// ---------------- Internal (not related to a service) -----------------

message SyncRequest {
    message SyncRequestTopic {
        repeated string partitions = 1;
    }

    map<string, SyncRequestTopic> topics = 1;
}

message SyncResponse {
    message SyncResponseTopic {
        map<string, Message> partitions = 1;
    }

    map<string, SyncResponseTopic> topics = 1;
}
